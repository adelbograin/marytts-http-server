// FIXME: add test if voices exist in the class path !
buildscript {
    repositories {
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        //rest docs generation
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
    }
}


apply plugin: 'java'
//apply plugin: 'eclipse'
//apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'application'
mainClassName = 'marytts.http.Server'

version '0.1.0-SNAPSHOT'
status 'integration'

jar {
    baseName = rootProject.name
    version = version
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
    mavenCentral()
    jcenter()
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


configurations {
    jaxDoclet
}
configurations.all {
   exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

def maryttsVersion = '6.0.1-SNAPSHOT'

dependencies {
    compile group:"org.json", name:"json", version:"20090211"

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "logback-classic"
        exclude module: 'spring-boot-starter-logging'
    }

    compile ('org.springframework.boot:spring-boot-starter-log4j2')

    // compile group: 'de.dfki.mary', name: 'marytts-hsmm', version: maryttsVersion
    compile group: 'de.dfki.mary', name: 'marytts-common', version: maryttsVersion
    ['en'].each { locale ->
        runtime group: 'de.dfki.mary', name: "marytts-lang-$locale", version: maryttsVersion
    }

    // testCompile group: 'de.dfki.mary', name: 'marytts-hsmm', version: maryttsVersion
    testCompile group: 'de.dfki.mary', name: 'marytts-common', version: maryttsVersion
    ['en'].each { locale ->
        testCompile group: 'de.dfki.mary', name: "marytts-lang-$locale", version: maryttsVersion
    }
    runtime fileTree(dir: 'installed', include: '*.jar')
    // runtime fileTree(dir: 'hts_test', include: '*.jar')

    //standard spring boot testing framework
    testCompile("org.springframework.boot:spring-boot-starter-test")

    //spring REST docs generator
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
}



/**********************************************************************************************
 ** Formatting
 ***********************************************************************************************/
task autoFormatCode() {
    def config = new File("astyle_marytts.conf")
    inputs.files config
    outputs.upToDateWhen { false }
    doLast {
        fileTree(dir: '.' , include: '**/*.java').each { java_file ->
		exec {
                commandLine "astyle", "--options=$config", java_file
            }
        }
    }
}


/**********************************************************************************************
 ** Documenting
 ***********************************************************************************************/
asciidoctor {
    sourceDir 'src/main/docs/asciidoc'
    outputDir "build/asciidoc"
    dependsOn test
    attributes \
      'snippets': file('build/snippets')
}



/**********************************************************************************************
 ** Running
 ***********************************************************************************************/
//pass agrument to Application class
bootRun {
    if ( project.hasProperty('args') ) {
        args project.args.split('\\s+')
    }
}
